import requests


def get_bpmn_json(api_key, user_text):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Version": "2",  # Важно для корректной работы
    }

    # Промпт для генерации JSON
    prompt = f"""
    Ты — помощник, который превращает текстовую инструкцию в JSON-структуру для BPMN-диаграммы в стиле mermaid.js.

    Вот примеры похожих описаний и их JSON-структуры:
    {{example_texts}}

    Прочитай описание и верни ТОЛЬКО JSON следующего вида:

    {{
        "nodes": [
            {{ "id": "A", "type": "StartEvent", "label": "Название события" }},
            {{ "id": "B", "type": "Process", "label": "Описание шага" }},
            {{ "id": "C", "type": "Decision", "label": "Выбор" }},
            {{ "id": "D", "type": "EndEvent", "label": "Результат" }}
        ],
        "edges": [
            {{ "from": "A", "to": "B", "label": "Условие (может быть пустым)", "type": "-->" }}
        ]
    }}

    Типы узлов (поле "type"):  
    - "StartEvent" — начальное событие  
    - "Process" — шаг процесса  
    - "Decision" — точка выбора  
    - "EndEvent" — финальное состояние  

    Тип стрелок ("type") — всегда "-->".

    ВАЖНО:  
    - Верни только JSON без пояснений.  
    - Строго соблюдай структуру: nodes, edges, id, label, type, from, to.  
    - Все ID должны быть буквами (A, B, C и т.д.).

    Описание:  
    {user_text}
    """

    data = {
        "model": "qwen/qwen-2.5-coder-32b-instruct",  # было 32B
        # "qwen/qwen2.5-coder-7b-instruct"
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.2,
        "max_tokens": 1500,
        "mode": "json"
    }

    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 200:
        return response.json()  # Ответ в формате JSON
    else:
        print(f"Ошибка {response.status_code}: {response.text}")
        return None


if __name__ == "__main__":
    api_key = "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" # Вставь сюда свой ключ
    user_text = '''Приготовление блюда в ресторане начинается с того, что шеф-повар собирает команду на утреннюю
     планерку, где обсуждаются цели на день, специальные предложения и наличие продуктов на складе, и вот уже повара
      берут в руки списки, чтобы отправиться на кухню, где уже разложены свежие ингредиенты, благоухающие специи и
       инструменты, которые они любят; один из помощников повара с утра пришел, чтобы замариновать мясо, в то время 
       как другой уже нарезает овощи для салата, а третий очистает картошку на пюре, аромат из кухни становится все 
       более насыщенным, и здесь же упаковка с рыбой, решается вопрос, как лучше ее обработать, чтобы сохранить
        текстуру и вкус, ведь каждое блюдо должно радовать не только душу, но и тело, есть рулетка с приправами –
         добавлять или нет, а шеф все время наблюдает за процессом, и в один момент вносит свои коррективы, предлагая
          альтернативные варианты, вот и закипает бульон, и запах укропа наполняет пространство, повара работают 
          слаженно, как механизм, один выкладывает ингредиенты, другой следит за временем, ведь важна каждая секунда, 
          подходя ко времени подачи, они начинают ковать финальные штрихи, кто-то ставит гриль, кто-то готовит соус,
           накрывается тарелка, и, наконец, идет финальная проверка – цвет, аромат, текстура и подача, каждый элемент
            на своем месте, и тут раздается команда – подача в зал; официанты берут блюдо, оно выглядит красиво, а 
            затем передается гостю, который с нетерпением ждет первых укусов, и вместе с ним работники кухни 
            расслабляются, зная, что все прошло без сучка и задоринки, пока шеф уже планирует следующее меню,
             рассматривая новые концепции, а мечты о новых блюдах кружат в его голове, как движение ложки по кастрюле,
              удовлетворение от хорошо выполненной работы – неоценимый опыт, который заставляет продолжать стремиться
               к совершенству в каждой тарелке.'''
    response = get_bpmn_json(api_key, user_text)
    if response:
        print("Ответ от модели:")
        print(response)
